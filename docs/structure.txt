1. Research into suitable randomness sources and their bit rates (Intel
RDRAND, OS-supplied entropy, ID Quantique QRNG device).

2. Design of suitable file/data formats for managing the random bits -
need meta-data, naming convention that does not eat up too much space on
disk/USB stick.

3. Developing a software module that accesses these entropy sources to get
bits and writes them to pairs of disk/USB sticks in the format from step

2, at high speed. (This would be a small-footprint piece of code that can
run on a completely offline machine in a secure environment.)

4. Writing a small software module that provides a general purpose API
allowing a calling program to access the disk/USB stick to get the
relevant bits (the API will take as input an index and return the bits at
that index; it's going to be up to the calling program to manage its
indices so that each value is only used once).

5. Writing a small demonstrator program that uses the API to get keys for
encryption of, say, network packets or data files (basically, enabling us
to build a small demo system showing the system in action).

6. On-going documentation of the system development, writing everything up
in the style of an extended blog post as we go along.

7. (Optional) Consider the protection of the on-disk key material using an
additional layer of encryption (to limit attacks on stolen devices).
